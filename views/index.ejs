<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Therapy Management</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="stylesheets/styles.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .delete-btn {
            cursor: pointer;
            color: red;
            font-size: 1.2em;
            border: none;
            background: transparent;
        }

        .delete-btn:hover {
            color: darkred;
        }
    </style>
</head>

<body>
    <div class="navbar">
        <div class="menu-toggle" onclick="toggleSidebar()">&#9776;</div>
        <div class="title">SelfHelp</div>
        <div class="nav-list">
            <a href="#">Admin</a>
        </div>
    </div>

    <div class="sidebar" id="sidebar">
        <a href="#home-content" onclick="showContent('home-content')"><i
                class="bi bi-house"></i><span>Başlangıç</span></a>
        <a href="#iceriklerim-content" onclick="showContent('iceriklerim-content')"><i
                class="bi bi-file-earmark"></i><span>İçeriklerim</span></a>
        <a href="#icerik-ekle-content" onclick="showContent('icerik-ekle-content')"><i
                class="bi bi-plus-square"></i><span>Ekle</span></a>
    </div>

    <div class="content" id="content">
        <div id="home-content" class="centered-content" style="display: flex;">
            <img src="images/self.png" alt="Self Image">
        </div>

        <!-- İçeriklerim Sayfası -->
        <div id="iceriklerim-content" style="display: block;">
            <!-- Terapilerim -->
            <div class="section">
                <h2>Terapilerim</h2>
                <div class="list-container">
                    <!-- Terapiler Listesi -->
                    <div class="icerik-card">
                        <div class="card-title">Terapi 1</div>
                        <div class="card-description">
                            Terapi 1 hakkında kısa açıklama buraya yazılacaktır.
                        </div>
                        <a href="#" class="card-button">Detayları Gör</a>
                    </div>
                    <!-- Diğer terapi içerikleri buraya eklenecek -->
                </div>
            </div>

            <!-- Podcastlerim -->
            <div class="section">
                <h2>Podcastlerim</h2>
                <div class="list-container">
                    <!-- Podcastler Listesi -->
                    <div class="icerik-card">
                        <div class="card-title">Podcast 1</div>
                        <div class="card-description">
                            Podcast 1 hakkında kısa açıklama buraya yazılacaktır.
                        </div>
                        <a href="#" class="card-button">Dinle</a>
                    </div>
                    <!-- Diğer podcast içerikleri buraya eklenecek -->
                </div>
            </div>

            <!-- Egzersizlerim -->
            <div class="section">
                <h2>Egzersizlerim</h2>
                <div class="list-container">
                    <!-- Egzersizler Listesi -->
                    <div class="icerik-card">
                        <div class="card-title">Egzersiz 1</div>
                        <div class="card-description">
                            Egzersiz 1 hakkında kısa açıklama buraya yazılacaktır.
                        </div>
                        <a href="#" class="card-button">Başla</a>
                    </div>
                    <!-- Diğer egzersiz içerikleri buraya eklenecek -->
                </div>
            </div>

            <!-- Yazılarım -->
            <div class="section">
                <h2>Yazılarım</h2>
                <div class="list-container">
                    <!-- Yazılar Listesi -->
                    <div class="icerik-card">
                        <div class="card-title">Yazı 1</div>
                        <div class="card-description">
                            Yazı 1 hakkında kısa açıklama buraya yazılacaktır.
                        </div>
                        <a href="#" class="card-button">Oku</a>
                    </div>
                    <!-- Diğer yazı içerikleri buraya eklenecek -->
                </div>
            </div>
        </div>

        <div id="icerik-ekle-content" class="card-container" style="display: flex;">
            <div class="card1" onclick="showTherapyForm()">
                <img src="images/therapy.png" alt="Terapi Ekle">
                <div class="label">Terapi Ekle</div>
            </div>
            <div class="card1" onclick="showPodcastForm()">
                <img src="images/podcast.png" alt="Podcast Ekle">
                <div class="label">Podcast Ekle</div>
            </div>
            <div class="card1" onclick="showExerciseForm()">
                <img src="images/exercise.png" alt="Egzersiz Ekle">
                <div class="label">Egzersiz Ekle</div>
            </div>
            <div class="card1" onclick="showPostForm()">
                <img src="images/post.png" alt="Yazı Ekle">
                <div class="label">Yazı Ekle</div>
            </div>
        </div>
    </div>

    <!-- Therapy Form Modal -->
    <div class="modal fade" id="therapyModal" tabindex="-1" aria-labelledby="therapyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="therapyModalLabel">Yeni Terapi Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="therapyForm">
                        <div class="mb-3">
                            <label for="title" class="form-label">Başlık</label>
                            <input type="text" class="form-control" id="title" required>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="imageUrl" class="form-label">Resim URL</label>
                            <input type="text" class="form-control" id="imageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="cardImageUrl" class="form-label">Kart Resim URL</label>
                            <input type="text" class="form-control" id="cardImageUrl" required>
                        </div>

                        <!-- Bölüm Ekleme -->
                        <div id="sectionContainerWrapper">
                            <div id="sectionContainer">
                                <h5 style="text-align: center;">Bölümler</h5>
                                <!-- Sections will be added here -->
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="addSection()">Bölüm
                                Ekle</button>
                        </div>

                        <button type="submit" class="btn btn-primary">Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="podcastModal" tabindex="-1" aria-labelledby="podcastModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="podcastModalLabel">Yeni Podcast Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="podcastForm">
                        <div class="mb-3">
                            <label for="podcastTitle" class="form-label">Başlık</label>
                            <input type="text" class="form-control" id="podcastTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="podcastDescription" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="podcastDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="podcastImageUrl" class="form-label">Resim URL</label>
                            <input type="text" class="form-control" id="podcastImageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="podcastCardImageUrl" class="form-label">Kart Resim URL</label>
                            <input type="text" class="form-control" id="podcastCardImageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="podcastSource" class="form-label">Kaynak</label>
                            <input type="text" class="form-control" id="podcastSource" required>
                        </div>

                        <button type="submit" class="btn btn-primary">Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Exercise Form Modal -->
    <div class="modal fade" id="exerciseModal" tabindex="-1" aria-labelledby="exerciseModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exerciseModalLabel">Yeni Egzersiz Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="exerciseForm">
                        <div class="mb-3">
                            <label for="exerciseName" class="form-label">Egzersiz Adı</label>
                            <input type="text" class="form-control" id="exerciseName" required>
                        </div>
                        <div class="mb-3">
                            <label for="exerciseDescription" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="exerciseDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="exerciseImageUrl" class="form-label">Resim URL</label>
                            <input type="text" class="form-control" id="exerciseImageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="exerciseCardImageUrl" class="form-label">Kart Resim URL</label>
                            <input type="text" class="form-control" id="exerciseCardImageUrl" required>
                        </div>

                        <div id="exerciseStepContainerWrapper">
                            <div id="exerciseStepContainer">
                                <h5 style="text-align: center; font-weight: bold;">Adımlar</h5>
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="addExerciseStep()">Adım
                                Ekle</button>
                        </div>

                        <button type="submit" class="btn btn-primary">Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="postModal" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="postModalLabel">Yeni Yazı Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="postForm">
                        <div class="mb-3">
                            <label for="postTitle" class="form-label">Başlık</label>
                            <input type="text" class="form-control" id="postTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="postDescription" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="postDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="postImageUrl" class="form-label">Resim URL</label>
                            <input type="text" class="form-control" id="postImageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="postCardImageUrl" class="form-label">Kart Resim URL</label>
                            <input type="text" class="form-control" id="postCardImageUrl" required>
                        </div>
                        <div class="mb-3">
                            <label for="postSource" class="form-label">Kaynak</label>
                            <input type="text" class="form-control" id="postSource" required>
                        </div>

                        <button type="submit" class="btn btn-primary">Ekle</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap 5 JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var originalStyles = {};

        function saveOriginalStyles() {
            var contents = document.querySelectorAll('.content > div');
            contents.forEach(function (content) {
                originalStyles[content.id] = getComputedStyle(content).display || 'none';
            });
            showContent('home-content');
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        async function fetchTherapies() {
            try {
                const token = getCookie('token');

                const response = await fetch('/content/my-therapies', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log(response);

                if (response.ok) {
                    const data = await response.json();
                    return data.therapies;
                } else {
                    console.error('Error fetching therapies:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching therapies:', error);
            }
        }

        async function displayTherapies() {
            const therapies = await fetchTherapies();
            const therapyListContainer = document.querySelector('.section:nth-of-type(1) .list-container');

            therapyListContainer.innerHTML = '';

            therapies.forEach(therapy => {
                const card = document.createElement('div');
                card.className = 'icerik-card';

                const cardTitle = document.createElement('div');
                cardTitle.className = 'card-title';
                cardTitle.textContent = therapy.title;

                const cardActions = document.createElement('div');
                cardActions.className = 'card-actions';

                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary';

                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-secondary';

                cardActions.appendChild(editButton);
                cardActions.appendChild(deleteButton);

                card.appendChild(cardTitle);
                card.appendChild(cardActions);

                therapyListContainer.appendChild(card);
            });
        }

        async function fetchPodcasts() {
            try {
                const token = getCookie('token');

                const response = await fetch('/content/my-podcasts', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log(response);

                if (response.ok) {
                    const data = await response.json();
                    return data.podcasts;
                } else {
                    console.error('Error fetching podcasts:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching podcasts:', error);
            }
        }

        async function displayPodcasts() {
            const podcasts = await fetchPodcasts();
            const podcastListContainer = document.querySelector('.section:nth-of-type(2) .list-container');

            podcastListContainer.innerHTML = '';

            podcasts.forEach(podcast => {
                const card = document.createElement('div');
                card.className = 'icerik-card';

                const cardTitle = document.createElement('div');
                cardTitle.className = 'card-title';
                cardTitle.textContent = podcast.title;

                const cardActions = document.createElement('div');
                cardActions.className = 'card-actions';

                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary';

                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-secondary';

                cardActions.appendChild(editButton);
                cardActions.appendChild(deleteButton);

                card.appendChild(cardTitle);
                card.appendChild(cardActions);

                podcastListContainer.appendChild(card);
            });
        }


        async function fetchExercises() {
            try {
                const token = getCookie('token');

                const response = await fetch('/content/my-exercises', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log(response);

                if (response.ok) {
                    const data = await response.json();
                    return data.exercises;
                } else {
                    console.error('Error fetching exercises:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching exercises:', error);
            }
        }

        async function displayExercises() {
            const exercises = await fetchExercises();
            const exerciseListContainer = document.querySelector('.section:nth-of-type(3) .list-container');

            exerciseListContainer.innerHTML = '';

            exercises.forEach(exercise => {
                const card = document.createElement('div');
                card.className = 'icerik-card';

                const cardTitle = document.createElement('div');
                cardTitle.className = 'card-title';
                cardTitle.textContent = exercise.name;

                const cardActions = document.createElement('div');
                cardActions.className = 'card-actions';

                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary';

                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-secondary';

                cardActions.appendChild(editButton);
                cardActions.appendChild(deleteButton);

                card.appendChild(cardTitle);
                card.appendChild(cardActions);

                exerciseListContainer.appendChild(card);
            });
        }


        async function fetchPosts() {
            try {
                const token = getCookie('token');

                const response = await fetch('/content/my-posts', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log(response);

                if (response.ok) {
                    const data = await response.json();
                    return data.posts;
                } else {
                    console.error('Error fetching posts:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching posts:', error);
            }
        }

        async function displayPosts() {
            const posts = await fetchPosts();
            const postListContainer = document.querySelector('.section:nth-of-type(4) .list-container');

            postListContainer.innerHTML = '';

            posts.forEach(post => {
                const card = document.createElement('div');
                card.className = 'icerik-card';

                const cardTitle = document.createElement('div');
                cardTitle.className = 'card-title';
                cardTitle.textContent = post.title;

                const cardActions = document.createElement('div');
                cardActions.className = 'card-actions';

                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary';

                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-secondary';

                cardActions.appendChild(editButton);
                cardActions.appendChild(deleteButton);

                card.appendChild(cardTitle);
                card.appendChild(cardActions);

                postListContainer.appendChild(card);
            });
        }

        function showContent(contentId) {
            var contents = document.querySelectorAll('.content > div');
            contents.forEach(function (content) {
                content.style.display = 'none';
            });

            if (contentId === 'iceriklerim-content') {
                displayTherapies();
                displayExercises();
                displayPodcasts();
                displayPosts();
            }

            var selectedContent = document.getElementById(contentId);
            if (selectedContent && originalStyles[contentId]) {
                selectedContent.style.display = originalStyles[contentId];
            }

            var sidebarLinks = document.querySelectorAll('.sidebar a');
            sidebarLinks.forEach(function (link) {
                link.classList.remove('active');
            });

            var activeLink = document.querySelector('.sidebar a[href="#' + contentId + '"]');
            if (activeLink) {
                activeLink.classList.add('active');
            }

            if (!document.querySelector('.sidebar').classList.contains('collapsed')) {
                toggleSidebar();
            }
        }

        function toggleSidebar() {
            var sidebar = document.querySelector('.sidebar');
            var content = document.querySelector('.content');
            var menuToggle = document.querySelector('.menu-toggle');

            sidebar.classList.toggle('collapsed');
            content.classList.toggle('sidebar-collapsed');
            menuToggle.classList.toggle('rotated');
        }

        function showTherapyForm() {
            var therapyModal = new bootstrap.Modal(document.getElementById('therapyModal'));
            therapyModal.show();
        }

        function resetForm() {
            document.getElementById('therapyForm').reset();
            document.getElementById('sectionContainer').innerHTML = '<h5 style="text-align: center;>Bölümler</h5>';
        }

        // Bölüm ve Adım Eklemek için JavaScript
        let sectionCount = 0;

        function addSection() {
            const sectionContainer = document.getElementById('sectionContainer');
            const sectionCount = sectionContainer.querySelectorAll('.section').length + 1;

            const sectionDiv = document.createElement('div');
            sectionDiv.classList.add('section');
            sectionDiv.setAttribute('data-index', sectionCount); // Her bölüme benzersiz bir index ekleyelim
            sectionDiv.innerHTML = `
            <div class="mb-3">
                <label for="sectionTitle${sectionCount}" class="form-label">Bölüm ${sectionCount} Başlığı</label>
                <input type="text" class="form-control" id="sectionTitle${sectionCount}" required>
                <button type="button" class="delete-btn" onclick="deleteSection(${sectionCount})">&times;</button>
            </div>
            <div class="stepsContainerWrapper">
                <div class="stepsContainer">
                <h6 style="font-weight: bold; text-align: center;">Adımlar</h6>
                    <!-- Steps will be added here -->
                </div>
                <button type="button" class="btn btn-secondary add-step-btn" onclick="addStep(${sectionCount})">Adım Ekle</button>
            </div>
        `;

            sectionContainer.appendChild(sectionDiv);
        }

        function addStep(sectionIndex) {
            const sectionDiv = document.querySelector(`.section[data-index="${sectionIndex}"]`);
            const stepsContainer = sectionDiv ? sectionDiv.querySelector('.stepsContainer') : null;

            if (!stepsContainer) {
                console.error('Adım eklenirken bir hata oluştu: stepsContainer bulunamadı.');
                return;
            }

            const stepCount = stepsContainer.querySelectorAll('.step').length + 1;

            const stepDiv = document.createElement('div');
            stepDiv.classList.add('step');
            stepDiv.innerHTML = `
            <div class="mb-3">
                <label for="stepTitle${sectionIndex}_${stepCount}" class="form-label">Adım ${stepCount} Başlığı</label>
                <input type="text" class="form-control" id="stepTitle${sectionIndex}_${stepCount}" required>
                <label for="stepContent${sectionIndex}_${stepCount}" class="form-label">Adım ${stepCount} İçeriği</label>
                <textarea class="form-control" id="stepContent${sectionIndex}_${stepCount}" rows="3" required></textarea>
                <button type="button" class="delete-btn" onclick="deleteStep(this)">&times;</button>
            </div>
            `;

            stepsContainer.appendChild(stepDiv);
        }

        function deleteSection(sectionIndex) {
            const sectionDiv = document.querySelector(`.section[data-index="${sectionIndex}"]`);
            if (sectionDiv) {
                sectionDiv.remove();
            }
        }

        function deleteStep(button) {
            const stepDiv = button.closest('.step');
            if (stepDiv) {
                stepDiv.remove();
            }
        }

        document.getElementById('therapyForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;
            const imageUrl = document.getElementById('imageUrl').value;
            const cardImageUrl = document.getElementById('cardImageUrl').value;

            const sections = [];
            document.querySelectorAll('#sectionContainer .section').forEach(section => {
                const sectionTitle = section.querySelector('input[id^="sectionTitle"]').value;
                const steps = [];
                section.querySelectorAll('.stepsContainer .step').forEach(step => {
                    const stepTitle = step.querySelector('input[id^="stepTitle"]').value;
                    const stepContent = step.querySelector('textarea[id^="stepContent"]').value; // Yeni eklenen content
                    steps.push({ title: stepTitle, content: stepContent });
                });
                sections.push({ title: sectionTitle, steps });
            });

            try {
                const response = await fetch('/content/therapies', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title,
                        description,
                        imageUrl,
                        cardImageUrl,
                        sections
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    alert('Terapi Eklendi');
                    const therapyModal = bootstrap.Modal.getInstance(document.getElementById('therapyModal'));
                    therapyModal.hide();
                    resetForm();
                } else {
                    alert(`Hata: ${result.message}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Bir hata oluştu!');
            }
        });

        document.getElementById('therapyModal').addEventListener('hidden.bs.modal', function () {
            resetForm();
        });

        document.getElementById('podcastModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('podcastForm').reset(); // Podcast formunu sıfırla
        });

        function showPodcastForm() {
            var podcastModal = new bootstrap.Modal(document.getElementById('podcastModal'));
            podcastModal.show();
        }

        document.getElementById('podcastForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const title = document.getElementById('podcastTitle').value;
            const description = document.getElementById('podcastDescription').value;
            const imageUrl = document.getElementById('podcastImageUrl').value;
            const cardImageUrl = document.getElementById('podcastCardImageUrl').value;
            const source = document.getElementById('podcastSource').value;

            try {
                const response = await fetch('/content/podcasts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title,
                        description,
                        imageUrl,
                        cardImageUrl,
                        source
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    alert('Podcast Eklendi');
                    const podcastModal = bootstrap.Modal.getInstance(document.getElementById('podcastModal'));
                    podcastModal.hide();
                    document.getElementById('podcastForm').reset();
                } else {
                    alert(`Hata: ${result.message}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Bir hata oluştu!');
            }
        });

        function showExerciseForm() {
            var exerciseModal = new bootstrap.Modal(document.getElementById('exerciseModal'));
            exerciseModal.show();
        }

        function resetExerciseForm() {
            document.getElementById('exerciseForm').reset();
            document.getElementById('exerciseStepContainer').innerHTML = '<h5 style="text-align: center; font-weight: bold;">Adımlar</h5>';
        }

        let exerciseStepCount = 0;

        function addExerciseStep() {
            const exerciseStepContainer = document.getElementById('exerciseStepContainer');
            const stepCount = exerciseStepContainer.querySelectorAll('.step').length + 1;

            const stepDiv = document.createElement('div');
            stepDiv.classList.add('step');
            stepDiv.innerHTML = `
        <div class="mb-3">
            <label for="exerciseStepSource${stepCount}" class="form-label">Adım ${stepCount} Kaynağı</label>
            <input type="text" class="form-control" id="exerciseStepSource${stepCount}" required>
            <label for="exerciseStepDescription${stepCount}" class="form-label">Adım ${stepCount} Açıklaması</label>
            <textarea class="form-control" id="exerciseStepDescription${stepCount}" rows="3" required></textarea>
            <button type="button" class="delete-btn" onclick="deleteExerciseStep(this)">&times;</button>
        </div>
    `;

            exerciseStepContainer.appendChild(stepDiv);
        }

        function deleteExerciseStep(button) {
            const stepDiv = button.closest('.step');
            if (stepDiv) {
                stepDiv.remove();
            }
        }

        document.getElementById('exerciseForm').addEventListener('submit', async function (event) {
            event.preventDefault(); // Formun varsayılan gönderim davranışını engelle

            const name = document.getElementById('exerciseName').value;
            const description = document.getElementById('exerciseDescription').value;
            const imageUrl = document.getElementById('exerciseImageUrl').value;
            const cardImageUrl = document.getElementById('exerciseCardImageUrl').value;

            const steps = [];
            document.querySelectorAll('#exerciseStepContainer .step').forEach(step => {
                const source = step.querySelector('input[id^="exerciseStepSource"]').value;
                const stepDescription = step.querySelector('textarea[id^="exerciseStepDescription"]').value;
                steps.push({ source, stepDescription });
            });

            try {
                const response = await fetch('/content/exercises', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        description,
                        imageUrl,
                        cardImageUrl,
                        steps
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    alert('Egzersiz Eklendi');
                    const exerciseModal = bootstrap.Modal.getInstance(document.getElementById('exerciseModal'));
                    exerciseModal.hide();
                    resetExerciseForm();
                } else {
                    alert(`Hata: ${result.message}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Bir hata oluştu!');
            }
        });

        document.getElementById('exerciseModal').addEventListener('hidden.bs.modal', function () {
            resetExerciseForm();
        });

        function showPostForm() {
            var postModal = new bootstrap.Modal(document.getElementById('postModal'));
            postModal.show();
        }

        document.getElementById('postForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const title = document.getElementById('postTitle').value;
            const description = document.getElementById('postDescription').value;
            const imageUrl = document.getElementById('postImageUrl').value;
            const cardImageUrl = document.getElementById('postCardImageUrl').value;
            const source = document.getElementById('postSource').value;

            try {
                const response = await fetch('/content/posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title,
                        description,
                        imageUrl,
                        cardImageUrl,
                        source
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    alert('Yazı Eklendi');
                    const postModal = bootstrap.Modal.getInstance(document.getElementById('postModal'));
                    postModal.hide();
                    document.getElementById('postForm').reset();
                } else {
                    alert(`Hata: ${result.message}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Bir hata oluştu!');
            }
        });

        document.getElementById('postModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('postForm').reset();
        });

        document.addEventListener('DOMContentLoaded', function () {
            saveOriginalStyles();
            showContent('home-content');
        });
    </script>
</body>

</html>